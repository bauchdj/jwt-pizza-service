name: CI Pipeline

on:
    push:
        branches:
            - main
    workflow_dispatch:
jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.set_version.outputs.version }}
        services:
            mysql:
                image: mysql:8.0.29
                env:
                    MYSQL_ROOT_PASSWORD: tempdbpassword
                    MYSQL_DATABASE: ${{ secrets.MYSQL_DB }}
                ports:
                    - "3306:3306"
                options: >-
                    --health-cmd "mysqladmin ping -ptempdbpassword"
                    --health-interval 10s 
                    --health-start-period 10s 
                    --health-timeout 5s 
                    --health-retries 10

        steps:
            - name: Checkout repo
              uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: "23.x"

            - name: Install dependencies
              run: npm ci

            - name: Lint
              run: npm run lint

            - name: Write config file
              run: |
                  cat > src/dbConfig.json <<EOF
                  {
                    "jwtSecret": "${{ secrets.JWT_SECRET }}",
                    "db": {
                      "connection": {
                        "host": "127.0.0.1",
                        "user": "root",
                        "password": "tempdbpassword",
                        "database": "${{ secrets.MYSQL_DB }}",
                        "connectTimeout": 60000
                      },
                      "listPerPage": 10
                    },
                    "factory": {
                      "url": "https://pizza-factory.cs329.click",
                      "apiKey": "${{ secrets.FACTORY_API_KEY }}"
                    }
                  }
                  EOF

            - name: Tests
              run: npm test

            - name: set version
              id: set_version
              run: |
                  version=$(date +'%Y%m%d.%H%M%S')
                  echo "version=$version" >> "$GITHUB_OUTPUT"
                  printf '{"version": "%s" }' "$version" > src/version.json

            - name: Update coverage
              run: |
                  coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
                  color=$(echo "$coverage < 80" | bc | awk '{if ($1) print "red"; else print "green"}')
                  curl -s -X POST "https://badge.cs329.click/badge/${{ github.repository_owner }}/jwtpizzaservicecoverage?label=Coverage&value=$coverage%25&color=$color" -H "authorization: bearer ${{ secrets.FACTORY_API_KEY }}" -o /dev/null

            - name: Create dist and docker-dist
              env:
                  DB_HOSTNAME: ${{ secrets.DB_HOSTNAME }}
                  DB_USERNAME: ${{ secrets.DB_USERNAME }}
                  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
              run: |
                  set -ex  # -e: exit on error, -x: debug

                  DOCKER_DIR=docker-dist

                  # Build JavaScript
                  npm run build

                  mkdir $DOCKER_DIR

                  # Copy the files to the docker directory 
                  cp Dockerfile $DOCKER_DIR
                  cp -r dist/src/* $DOCKER_DIR
                  cp dist/version.json $DOCKER_DIR
                  cp package.json $DOCKER_DIR
                  cp package-lock.json $DOCKER_DIR

                  # Change package.json type to commonjs in DOCKER_DIR directory
                  jq '.type="commonjs"' $DOCKER_DIR/package.json > $DOCKER_DIR/package.json.tmp && mv $DOCKER_DIR/package.json.tmp $DOCKER_DIR/package.json

                  # Update dbConfig.json with new values
                  jq --arg host "$DB_HOSTNAME" --arg user "$DB_USERNAME" --arg password "$DB_PASSWORD" \
                    '.host = $host | .user = $user | .password = $password' \
                    $DOCKER_DIR/dbConfig.json > $DOCKER_DIR/dbConfig.json.tmp && mv $DOCKER_DIR/dbConfig.json.tmp $DOCKER_DIR/dbConfig.json

            - name: Update docker-distribution artifact
              uses: actions/upload-artifact@v4
              with:
                  name: package
                  path: docker-dist/

    deploy:
        runs-on: ubuntu-latest
        permissions:
            id-token: write
        needs: build
        env:
            version: ${{needs.build.outputs.version}}

        steps:
            - name: Download distribution artifact
              uses: actions/download-artifact@v4
              with:
                  name: package

            - name: Create OIDC token to AWS
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  audience: sts.amazonaws.com
                  aws-region: us-east-1
                  role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.CI_IAM_ROLE }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Set up machine emulation
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker build
              uses: docker/setup-buildx-action@v3

            - name: Build and push container image
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: "jwt-pizza-service"
              run: |
                  docker build --platform=linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY --push .
                  echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >>  $GITHUB_OUTPUT

            - name: Deploy new container
              run: |
                  aws ecs update-service --cluster jwt-pizza-service --service jwt-pizza-service --force-new-deployment
